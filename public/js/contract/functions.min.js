const dayMap = {
    D: 0, // Domingo
    L: 1, // Lunes
    M: 2, // Martes
    Mi: 3, // Miércoles
    J: 4, // Jueves
    V: 5, // Viernes
    S: 6, // Sábado
};
const day_letters = ["L", "M", "Mi", "J", "V", "S", "D"];

var contract_data = [];
var update_order_data = [];
var aux = "";

// Genera la fecha de finalizacion del contrato
function set_endDate() {
    var startDateValue = $("#startdate").val();

    if (startDateValue) {
        var startDate = new Date(startDateValue);

        var endDate = new Date(startDate);
        endDate.setFullYear(endDate.getFullYear() + 1);
        endDate.setDate(endDate.getDate() - 1);

        var endDateFormatted = endDate.toISOString().split("T")[0];

        $("#enddate").val(endDateFormatted);
    }
}

function createService(service) {
    var i = service.index;
    var hasOrders = typeof orders != "undefined";
    var dates = contract_data.find((item) => item.id == service.id).dates;
    var count =
        dates.length > 0
            ? dates.length
            : hasOrders
            ? orders.find((item) => item.service_id == service.id)?.orders
                  .length || 0
            : 0;

    var html = `
            <tr>
                <th class="text-center" scope="row">${i + 1}</th>
                <td class="text-center">${service.name}</td>
                <td class="text-center">${count}</td>
                <td class="text-center">
                    <button type="button" class="btn btn-warning btn-sm" onclick="showPreview(${
                        service.index
                    })"><i class="bi bi-calendar-fill"></i> Fechas</button>
                    <button type="button" class="btn btn-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#editServiceModal" onclick="editService(${
                        service.index
                    }, '${
        service.name
    }')"><i class="bi bi-pencil-square"></i> Editar</button>
                    <button type="button" class="btn btn-dark btn-sm" onclick="duplicateService(${i})"><i class="bi bi-plus-lg"></i> Duplicar</button>
                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteService(${i})"><i class="bi bi-trash-fill"></i> Eliminar</button>
                </td>
            </tr>
        `;

    return html;
}

function editService(index, name) {
    var service = contract_data.find((item) => item.index == index);
    var count = service.dates.length;

    $("#editServiceModalLabel").text(`Editar servicio ${index + 1} [${count}]`);

    $("#days").val("");
    $("#service-name").val(name);
    $("#frequency").val(1);
    $("#interval").val(1);
    $("#number-days").hide();
    $("#interval").prop("disabled", true);
    $("#days").prop("disabled", true);
    $("#service-index").val(index);
}

function controlInputs(frequency_op) {
    $("#days").val("");
    $("#letter-days").show();
    $("#interval").val(1);

    if (frequency_op == 1 || frequency_op == 4) {
        $("#interval").prop("disabled", true);
        $("#days").prop("disabled", true);
        $("#number-days").hide();
    }

    if (frequency_op == 2) {
        $("#interval").prop("disabled", true);
        $("#days").prop("disabled", false);
        $("#number-days").hide();
    }

    if (frequency_op == 3) {
        $("#interval").prop("disabled", false);
        $("#days").prop("disabled", false);
        $("#letter-days").hide();
        $("#number-days").show();
    }

    if (frequency_op == 5) {
        $("#interval").val(6);
        $("#interval").prop("disabled", false);
        $("#days").prop("disabled", false);
        $("#number-days").hide();
    }
}

function controlDays(interval_op) {
    $("#days").val("");
    $("#number-days").show();
    $("#letter-days").hide();
    $("#days").prop("disabled", false);

    if (interval_op > 1) {
        $("#number-days").hide();
        $("#letter-days").show();
        $("#days").prop("disabled", false);
    }

    if (interval_op == 6) {
        $("#days").prop("disabled", true);
    }
}

function setContractData() {
    var index = $("#service-index").val();
    var frequency = parseInt($("#frequency").val());
    var interval = $("#interval").val();
    var pos = contract_data.findIndex((item) => item.index == index);
    if (pos != -1) {
        var days = $(
            "#letter-days:visible #days, #number-days:visible #days"
        ).val();

        if (days) {
            contract_data[pos].days = days
                .split(",")
                .map((value) => value.trim())
                .map((value) =>
                    $("#number-days").is(":visible")
                        ? parseInt(value, 10)
                        : value
                );
        }

        contract_data[pos].frequency = frequency;
        contract_data[pos].interval = parseInt(interval || 1);
        createContract(contract_data[pos]);
    }
    $("#editServiceModal").modal("hide");
}

function createServicesList() {
    contract_data = contract_data.filter((data) =>
        selected_services.some((service) => service.id == data.id)
    );

    contract_data.forEach((data, i) => {
        data.index = i;
    });

    selected_services.forEach((service, i) => {
        if (!contract_data.some((item) => item.id == service.id)) {
            contract_data.push({
                index: contract_data.length <= 0 ? i : contract_data.length,
                id: service.id,
                name: service.name,
                frequency: 1,
                interval: 0,
                days: [],
                dates: [],
            });
        }
    });

    showServices();
}

function showServices() {
    var html = "";
    contract_data.forEach((data) => {
        html += createService(data);
    });

    $("#selected-services").html(html);
}

function setFrecuency(index) {
    var exec_type = parseInt($("#exec" + index).val());
    var interval = $("#interval" + index);
    var types = [3, 5];
    var service = contract_data.find((item) => item.index == index);

    if (service) {
        service.frequency = exec_type;

        interval.empty();

        if (types.includes(exec_type)) {
            service.interval = 1;
            if (exec_type == 3) {
                interval.append(
                    $("<option>", {
                        value: "1",
                        text: "Por día",
                    })
                );
                interval.append(
                    $("<option>", {
                        value: "2",
                        text: "Primera semana",
                    })
                );
                interval.append(
                    $("<option>", {
                        value: "3",
                        text: "Segunda semana",
                    })
                );
                interval.append(
                    $("<option>", {
                        value: "4",
                        text: "Tercera semana",
                    })
                );
                interval.append(
                    $("<option>", {
                        value: "5",
                        text: "Cuarta/Ultima semana",
                    })
                );

                $("#day-letter" + index).hide();
                $("#day-number" + index).show();
            } else {
                interval.append(
                    $("<option>", {
                        value: "1",
                        text: "Quincenal",
                    })
                );
            }
        } else {
            service.interval = 0;
            interval.append(
                $("<option>", {
                    value: "0",
                    text: "No aplica",
                })
            );
        }

        interval.prop("disabled", !types.includes(exec_type));

        if (exec_type == 2) {
            $("#day-letter" + index).prop("disabled", false);
            $("#day-letter" + index).show();
            $("#day-number" + index).hide();
        }
        if (exec_type == 1 || exec_type == 4) {
            $("#day-letter" + index).show();
            $("#day-letter" + index).val("");
            $("#day-letter" + index).prop("disabled", true);
            $("#day-number" + index).hide();
        }
    }
}

function setDays(index) {
    var exec_type = parseInt($("#exec" + index).val());
    var interval = $("#interval" + index).val();

    var service = contract_data.find((item) => item.index == index);

    if (service) {
        service.interval = parseInt(interval);
    }

    if (exec_type == 3) {
        if (interval == 1) {
            $("#day-letter" + index).hide();
            $("#day-number" + index).show();
        } else {
            $("#day-letter" + index).prop("disabled", false);
            $("#day-letter" + index).show();
            $("#day-number" + index).hide();
        }
    }
}

function validateNumberInput(input) {
    let values = input.value.split(",").map((value) => value.trim());
    let last_value = values[values.length - 1];
    let last_num = parseInt(last_value);
    //var service = contract_data.find((item) => item.index == index);

    if ((last_num > 31 || last_num < 1) && last_value != "") {
        alert("No puedes ingresar un número menor a 1 o mayor a 31.");
        values[values.length - 1] = aux;
        input.value = values.join(", ");
    } else {
        aux = last_value;
        /*if (service) {
            service.days = values.map((value) => parseInt(value, 10));
        }*/
    }
}

function validateLetterInput(input) {
    let values = input.value.split(",").map((value) => value.trim());
    let last_value = values[values.length - 1];
    //var service = contract_data.find((item) => item.index == index);

    if (last_value != "") {
        if (!day_letters.includes(last_value)) {
            alert(
                "No puedes ingresar una en mayusculas correspondientes a cada dia."
            );
            values[values.length - 1] = aux;
            input.value = values.join(", ");
        } /*else {
            if (service) {
                service.days = values;
            }
        }*/
    }
}

function deleteService(index) {
    if (index < 0 || index >= contract_data.length) {
        console.error("Índice no válido");
        return;
    }

    var service = contract_data[index];

    let selectedIndex = selected_services.findIndex(
        (item) => item.id == service.id
    );
    if (selectedIndex != -1) {
        selected_services.splice(selectedIndex, 1);
        $("#service" + service.id).removeClass("active");
    }

    contract_data.splice(index, 1);
    contract_data.forEach((item, idx) => (item.index = idx));
    showServices();
}

function duplicateService(index) {
    if (index < 0 || index > contract_data.length) {
        console.error("Posición no válida");
        return;
    }

    var item = { ...contract_data[index] };
    item.index = contract_data.length;
    contract_data.push(item);
    showServices();
}

function generateDatesByNumber(startDate, endDate, days) {
    const dates = [];
    const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    let start = new Date(startDate);
    let end = new Date(endDate);

    const isLeapYear = (year) =>
        (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;

    while (start <= end) {
        let month = start.getMonth();
        let year = start.getFullYear();
        let daysInCurrentMonth = daysInMonth[month];

        if (month == 1 && isLeapYear(year)) {
            daysInCurrentMonth = 29; // February in a leap year
        }

        const validDays = days
            .map((d) =>
                d == 31 && daysInCurrentMonth < 31 ? daysInCurrentMonth : d
            )
            .filter((d) => d <= daysInCurrentMonth);

        if (validDays.includes(start.getDate())) {
            dates.push(new Date(start));
        }

        start.setDate(start.getDate() + 1);
    }

    return dates;
}

function sortDates(dateArray) {
    return dateArray.sort((a, b) => a - b);
}

function generateDatesByLetter(startDate, endDate, days) {
    const dates = [];
    const day_indexs = days
        .map((day) => dayMap[day])
        .filter((index) => index != undefined);

    day_indexs.forEach((index) => {
        let start = new Date(startDate);
        let end = new Date(endDate);

        start.setDate(start.getDate() + 1);
        end.setDate(end.getDate() + 1);

        while (index != start.getDay()) {
            start.setDate(start.getDate() + 1);
        }

        while (start <= end) {
            if (day_indexs.includes(start.getDay())) {
                dates.push(new Date(start));
            }
            start.setDate(start.getDate() + 7);
        }
    });

    return sortDates(dates);
}

function generateDatesByInterval(startDate, endDate, days, interval) {
    const dates = [];
    const day_indexs = days
        .map((day) => dayMap[day])
        .filter((index) => index != undefined);

    const getNthWeekday = (year, month, dayOfWeek, n) => {
        let date = new Date(year, month, 1);
        date.setDate(((dayOfWeek - date.getDay() + 7) % 7) + 1);
        if (n > 1) {
            date.setDate(date.getDate() + (n - 1) * 7);
        }
        return date;
    };

    let current = new Date(startDate);

    while (current <= new Date(endDate)) {
        let year = current.getFullYear();
        let month = current.getMonth();

        for (const dayIndex of day_indexs) {
            let nthWeek = interval;
            let date = getNthWeekday(year, month, dayIndex, nthWeek);
            if (date >= new Date(startDate) && date <= new Date(endDate)) {
                dates.push(new Date(date));
            }
        }

        current.setMonth(current.getMonth() + 1);
        current.setDate(1);
    }

    return dates;
}

function generateDatesByPeriod(startDate, endDate, days) {
    const dates = [];
    const day_indexs = days
        .map((day) => dayMap[day])
        .filter((index) => index != undefined);

    day_indexs.forEach((index) => {
        let start = new Date(startDate);
        let end = new Date(endDate);

        start.setDate(start.getDate() + 1);
        end.setDate(end.getDate() + 1);

        while (index != start.getDay()) {
            start.setDate(start.getDate() + 1);
        }

        while (start <= end) {
            if (day_indexs.includes(start.getDay())) {
                dates.push(new Date(start));
            }
            start.setDate(start.getDate() + 14);
        }
    });

    return dates;
}

function getAllDatesBetween(startDate, endDate) {
    const dates = [];
    let current = new Date(startDate);
    const end = new Date(endDate);

    if (end < current) {
        throw new Error("End date must be after start date");
    }

    while (current <= end) {
        dates.push(new Date(current));
        current.setDate(current.getDate() + 1);
    }

    return dates;
}

function createContract(service) {
    const startDate = $("#startdate").val();
    const endDate = $("#enddate").val();
    const modal = $("#confirmModal");

    if (startDate == "" && endDate == "") {
        alert("Incluye la fecha de inicio y/o finalización del contrato");
        return;
    }

    if (contract_data.length <= 0) {
        alert("Añade y/o configura los servicios");
        return;
    }
    /*contract_data.forEach((service) => {
        
    });*/
    switch (service.frequency) {
        case 1:
            service.dates = getAllDatesBetween(startDate, endDate);
            break;
        case 2:
            service.dates = generateDatesByLetter(
                startDate,
                endDate,
                service.days
            );
            break;
        case 3:
            if (service.interval > 0) {
                service.dates =
                    service.interval == 1
                        ? generateDatesByNumber(
                              startDate,
                              endDate,
                              service.days
                          )
                        : generateDatesByInterval(
                              startDate,
                              endDate,
                              service.days,
                              service.interval - 1
                          );
            } else {
                alert(
                    "El intervalo seleccionado para el servicio " +
                        service.index +
                        " es incorrecto"
                );
            }
            break;
        case 4:
            service.dates.push(new Date(startDate));
            break;
        case 5:
            service.dates = generateDatesByPeriod(
                startDate,
                endDate,
                service.days
            );
            break;
        default:
            alert("La frecuencia no se encuentra en la lista de opciones");
            break;
    }
    createDatePreview(service);
    modal.modal("show");
}

function createDatePreview(service) {
    var html = "";
    html += `
        <div class="d-flex justify-content-between mb-3">
            <h5 class="fw-bold"> ${service.name} [${service.dates.length}] </h5>
            <button class="btn btn-primary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseNewDate" aria-expanded="false" aria-controls="collapseExample">
                <i class="bi bi-plus-lg"></i>
            </button>
        </div>
        <div class="collapse mb-3" id="collapseNewDate">
            <div class="card card-body">
                <div class="input-group input-group-sm mb-3">
                    <label for="new-date" class="form-label me-2">Nueva fecha</label>
                    <input type="date" class="form-control" id="new-date${
                        service.id
                    }" name="date" value="">
                    <button class="btn btn-primary" type="button" onclick="createDate(${
                        service.id
                    })">Agregar</button>
                </div>
            </div>
        </div>
        <div class="list-group">
        ${service.dates
            .map(
                (date, i) =>
                    ` <div class="input-group input-group-sm mb-3">
                        <input type="date" class="form-control" id="service${
                            service.id
                        }-date${i}" name="date" value="${convertDate(
                        date
                    )}" onchange="updateDate(this.value, ${service.id}, ${i})">
                        <button class="btn btn-danger" type="button" onclick="deleteDate(${
                            service.id
                        }, ${i})"><i class="bi bi-trash-fill"></i> Eliminar</button>
                    </div> `
            )
            .join("")}
        </div>
    `;
    $("#preview").html(html);
}

function showPreview(index) {
    const modal = $("#confirmModal");
    var pos = contract_data.findIndex((item) => item.index == index);
    if (pos != -1) {
        if (orders.length > 0) {
            var fetched_orders = orders.find(
                (item) => item.service_id == contract_data[pos].id
            ).orders;
            var fetched_services = contract_services.find(
                (item) => item.service_id == contract_data[pos].id
            );
            if (fetched_orders && contract_data[pos].dates.length <= 0) {
                contract_data[pos].dates = fetched_orders.map((item) => {
                    const date = new Date(item.programmed_date + "T00:00:00"); // Asegúrate de que la hora se asigne explícitamente
                    return new Date(
                        date.getUTCFullYear(),
                        date.getUTCMonth(),
                        date.getUTCDate()
                    ); // Forzar a UTC para evitar el desplazamiento de la zona horaria
                });

                contract_data[pos].frequency =
                    fetched_services.execution_frequency_id;
            }
        }
        createDatePreview(contract_data[pos]);
        modal.modal("show");
    }
}

function convertDate(date) {
    if (date instanceof Date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, "0"); // Los meses se cuentan desde 0
        const day = String(date.getDate()).padStart(2, "0");
        return `${year}-${month}-${day}`;
    } else {
        return date;
    }
}

function createDate(service_id) {
    var date = new Date($("#new-date" + service_id).val());
    date.setDate(date.getDate() + 1);
    service = contract_data.find((item) => item.id == service_id);

    if (service) {
        service.dates.push(date);
        $("#preview").html("");
        createDatePreview(service);
    }
}

function updateDate(value, service_id, index) {
    var date = new Date(value);
    date.setDate(date.getDate() + 1);
    service = contract_data.find((item) => item.id == service_id);

    if (service) {
        service.dates[index] = date;
    }
}

function deleteDate(service_id, index) {
    service = contract_data.find((item) => item.id == service_id);
    if (service) {
        service.dates.splice(index, 1);
        createDatePreview(service);
    }
}

function submitContract() {
    var new_dates = [];
    const customer = $("#customer_id").val();
    const startDate = $("#startdate").val();
    const endDate = $("#enddate").val();
    const technicians = JSON.parse($("#technicians").val());

    if (customer == 0) {
        alert("Selecciona el cliente");
        return;
    }

    if (startDate == "" && endDate == "") {
        alert("Incluye la fecha de inicio y/o finalización del contrato");
        return;
    }

    if (contract_data.length <= 0) {
        alert("Añade y/o configura los servicios");
        return;
    }

    if (technicians.length <= 0) {
        alert("Selecciona a los técnicos");
        return;
    }

    contract_data.forEach((service) => {
        new_dates = service.dates.map((date) => convertDate(date));
        service.dates = new_dates;
    });

    $("#contract-data").val(JSON.stringify(contract_data));

    if (confirm("¿Estás seguro actualizar el contrato?")) {
        $("#contract-form").submit();
    }
}

function updateOrders(order_id) {
    var start_time = $(`#order${order_id}-start-time`).val();
    var programmed_date = $(`#order${order_id}-programmed-date`).val();
    var pos = update_order_data.findIndex((item) => item.order_id == order_id);

    if (pos != -1) {
        update_order_data[pos].start_time = start_time;
        update_order_data[pos].programmed_date = programmed_date;
    } else {
        update_order_data.push({
            order_id: order_id,
            start_time: start_time,
            programmed_date: programmed_date,
        });
    }
}
