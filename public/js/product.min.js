var selected_products = [];
var products = [];
var product_indexs = [];

$(document).ready(function () {
    if (typeof fetched_products != 'undefined') {
        fetched_products.forEach((item, index) => {
            selected_products.push({
                index: item.index,
                id: item.id,
                name: item.name,
                group: item.biocide_group ?? "S/A",
                //type: found_product.biocide_type ?? 'S/A',
                active_ingredient: item.active_ingredient ?? "S/A",
                status: item.status,
                start_date: item.start_date,
                end_date: item.end_date,
                color: item.color,
            });
        })
    }
    setProducts();
});

function getProducts() {
    const csrfToken = $('meta[name="csrf-token"]').attr("content");
    var formData = new FormData();
    var input_text = $("#search").val();
    var url = $("#url-search-product").val();

    formData.append("search", JSON.stringify(input_text));

    if (input_text != "") {
        $.ajax({
            url: url,
            type: "POST",
            data: formData,
            contentType: false,
            processData: false,
            headers: {
                "X-CSRF-TOKEN": csrfToken,
            },
            success: function (response) {
                products = response;
                var html = "";
                products.forEach((product) => {
                    html += showProduct(product);
                });
                $("#product-list").html(html);
                $("#productModal").modal("show");
            },
            error: function (error) {},
        });
    } else {
        alert("Debes introducir el nombre del producto/materia activa");
    }
}

function showProduct(product) {
    var found_product = selected_products.find((item) => item.id == product.id);
    var status = found_product ? found_product.status : product.status;
    var html = `
        <a id="product${
            product.id
        }" class="list-group-item list-group-item-action ${
        status ? "active" : ""
    }" onclick="selectProduct(${product.id})" href="#!">
            <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1 fw-bold">[${product.id}] ${product.name}</h5>
            </div>
            <ul>
                <li class="text-break fw-bold">Utilización: <span class="fw-normal">${
                    product.biocide_group ?? "S/A"
                }</span></li>
                <li class="text-break fw-bold">Tipo: <span class="fw-normal">${
                    product.biocide_type ?? "S/A"
                }</span></li>
                <li class="text-break fw-bold">Ingrediente Activo: <span class="fw-normal">${
                    product.active_ingredient ?? "S/A"
                }</span></li>
            </ul>
        </a>
    `;

    return html;
}

function selectProduct(productId) {
    var found_product = products.find((item) => item.id == productId);
    var fetched_product = selected_products.find(
        (item) => item.id == productId
    );
    var element = $(`#product${productId}`);

    if (!fetched_product) {
        selected_products.push({
            index: selected_products.length,
            id: found_product.id,
            name: found_product.name,
            group: found_product.biocide_group ?? "S/A",
            //type: found_product.biocide_type ?? 'S/A',
            active_ingredient: found_product.active_ingredient ?? "S/A",
            status: true,
            start_date: "",
            end_date: "",
            color: "",
        });

        element.addClass("active");
    } else {
        if (element.hasClass("active")) {
            selected_products = selected_products.filter(
                (item) => item.id != productId
            );
            selected_products.forEach((product, index) => {
                product.index = index;
            });
            element.removeClass("active");
        }
    }
}

function setProducts() {
    var html = ``;
    $("#selected-products").html(html);
    selected_products.forEach((product) => {
        html += `
            <tr>
                <th scope="row">${product.index + 1}</th>
                <td class="text-primary fw-bold">${product.id}</td>
                <td>${product.name}</td>
                <td class="d-flex justify-content-center">
                    <input type="color" class="form-control form-control-color" id="product${
                        product.index
                    }-color" value="${product.color}" onchange="setColor(${
            product.index
        }, this.value)">
                </td>
                <td>${product.group}</td>
                <td>${product.active_ingredient}</td>
                <td>
                    <input type="date" class="form-control" id="product${
                        product.index
                    }-startdate" value="${
            product.start_date
        }" autocomplete="off" onblur="setStartdate(${product.index}, this.value)"/>
                </td>
                <td>
                    <input type="date" class="form-control" id="product${
                        product.index
                    }-enddate" value="${product.end_date}" autocomplete="off" onblur="setEnddate(${product.index}, this.value)"/>
                </td>
                <td>
                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteProduct(${
                        product.index
                    })"><i class="bi bi-trash-fill"></i> Eliminar</button>
                </td>
            </tr>
        `;
    });

    $("#selected-products").html(html);
    $("#productModal").modal("hide");
}

function setColor(index, value) {
    selected_products[index].color = value;
}

function setStartdate(index, value) {
    selected_products[index].start_date = value;
}

function setEnddate(index, value) {
    selected_products[index].end_date = value;
}

function hasProducts() {
    if (selected_products.length <= 0) {
        alert("Carácter no permitido");
        return;
    }
    $("#product-indexs").val("");
    $("#dateModal").modal("show");
}

function verifyProduct(input) {
    const regex = /^(\d+[\s,]*)*$/;
    const allowedValues = selected_products.map((item) => item.index + 1);

    // Verificar el formato del input
    if (!regex.test(input.trim())) {
        alert(`Las letras no estan permitidas.`);
        $("#product-indexs").val(product_indexs.join(","));
        return;
    }

    const cleanedInput = input
        .split(/[\s,]+/)
        .filter(Boolean)
        .join(",");
    const numbers = cleanedInput.split(",").map((item) => parseInt(item));
    const lastNumber = numbers[numbers.length - 1];

    if (lastNumber > 0 && !allowedValues.includes(lastNumber)) {
        alert(
            `Valor fuera de rango. Solo se permiten los siguientes valores ${allowedValues.join(
                ", "
            )}.`
        );
        $("#product-indexs").val(product_indexs.join(","));
        return;
    }

    product_indexs = numbers;
}

function setDates() {
    var indexs = $("#product-indexs").val();
    const startdate = $("#startdate").val();
    const enddate = $("#enddate").val();
    const product_startdate = $("#product-startdate").val();
    const product_enddate = $("#product-enddate").val();
    const color = $("#color").val();

    if (
        new Date(startdate) > new Date(product_startdate) ||
        new Date(enddate) < new Date(product_enddate)
    ) {
        alert("Período fuera de la duración");
        return;
    }

    indexs = indexs.split(",").map((item) => parseInt(item));

    indexs.forEach((index) => {
        $(`#product${index - 1}-startdate`).val(product_startdate);
        $(`#product${index - 1}-enddate`).val(product_enddate);
        $(`#product${index - 1}-color`).val(color);

        selected_products[index - 1].start_date = product_startdate;
        selected_products[index - 1].end_date = product_enddate;
        selected_products[index - 1].color = color;
    });

    $("#dateModal").modal("hide");
}

function deleteProduct(index) {
    selected_products = selected_products.filter((item) => item.index != index);
    selected_products.forEach((product, index) => {
        product.index = index;
    });
    setProducts();
}

function submitForm() {
    $("#products").val(JSON.stringify(selected_products));
}
