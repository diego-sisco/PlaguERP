const dayMap = {
    D: 0, // Domingo
    L: 1, // Lunes
    M: 2, // Martes
    Mi: 3, // Miércoles
    J: 4, // Jueves
    V: 5, // Viernes
    S: 6, // Sábado
};
const day_letters = ["L", "M", "Mi", "J", "V", "S", "D"];

var contract_data = [];
var aux = "";

// Genera la fecha de finalizacion del contrato
function set_endDate() {
    var startDateValue = $("#startdate").val();

    if (startDateValue) {
        var startDate = new Date(startDateValue);

        var endDate = new Date(startDate);
        endDate.setFullYear(endDate.getFullYear() + 1);
        endDate.setDate(endDate.getDate() - 1);

        var endDateFormatted = endDate.toISOString().split("T")[0];

        $("#enddate").val(endDateFormatted);
    }
}

function createService(service) {
    var i = service.index
    var html = `
            <tr>
                <th class="text-center" scope="row">${i + 1}</th>
                <td class="text-center">${service.name}</td>
                <td class="text-center">
                    <select id="exec${i}" class="form-select border-secondary border-opacity-50" onchange="setFrecuency(${i})">
                        ${execution_frecuencies
                            .map(
                                (exec) =>
                                    `<option value=${exec.id} ${
                                        service.frequency == exec.id
                                            ? "selected"
                                            : ""
                                    }>${exec.name}</option>`,
                            )
                            .join("")}
                    </select>
                </td>   
                <td class="text-center">
                    <select class="form-select border-secondary border-opacity-50" id="interval${i}" onchange="setDays(${i})" ${
                        service.frequency != 3 && service.frequency != 5
                            ? "disabled"
                            : ""
                    }>
                        ${
                            service.frequency == 3
                                ? `<option value="1" ${
                                      service.interval == 1 ? "selected" : ""
                                  }>Por día</option>
                            <option value="2" ${
                                service.interval == 2 ? "selected" : ""
                            }>Primera semana</option>
                            <option value="3" ${
                                service.interval == 3 ? "selected" : ""
                            }>Segunda semana</option>
                            <option value="4" ${
                                service.interval == 4 ? "selected" : ""
                            }>Tercera semana</option>
                            <option value="5" ${
                                service.interval == 5 ? "selected" : ""
                            }>Cuarta/Ultima semana</option>`
                                : service.frequency == 5
                                  ? `<option value="1" selected>Quincenal</option>`
                                  : `<option value="0" selected>No aplica</option>`
                        }
                    </select>
                </td>
                <td class="text-center">
                   <input type="text" 
                           id="day-letter${i}" 
                           class="form-control border-secondary border-opacity-50 uppercase" 
                           placeholder="L, M, Mi, J, V, S, D" 
                           value = "${service.days.join(', ')}"
                           oninput="validateLetterInput(this, ${i});"
                           ${
                               !(
                                   service.frequency == 2 ||
                                   service.frequency == 3
                               )
                                   ? "disabled"
                                   : ""
                           }
                           ${
                               service.frequency == 3 && service.interval == 1
                                   ? "style='display: none;'"
                                   : "style='display: block;'"
                           }
                    >
                    <input type="text" 
                           id="day-number${i}" 
                           class="form-control border-secondary border-opacity-50" 
                           placeholder="1,2,3 ... 31" 
                           value = "${service.days.join(',')}"
                           oninput="validateNumberInput(this, ${i})"
                           ${
                               service.frequency == 3 && service.interval == 1
                                   ? "style='display: block;'"
                                   : "style='display: none;'"
                           }
                    >
                </td>
                <td class="text-center">
                    <button type="button" class="btn btn-dark btn-sm" onclick="duplicateService(${i})"><i class="bi bi-plus-lg"></i> Duplicar</button>
                    <button type="button" class="btn btn-danger btn-sm" onclick="deleteService(${i})"><i class="bi bi-trash-fill"></i> Eliminar</button>
                </td>
            </tr>
        `;

    return html;
}

 
function createServicesList() {
    contract_data = contract_data.filter(data => 
        selected_services.some(service => service.id == data.id)
    );

    contract_data.forEach((data, i) => {
        data.index = i;
    });

    selected_services.forEach((service, i) => {
        if (!contract_data.some((item) => item.id == service.id)) {
            contract_data.push({
                index: contract_data.length <= 0 ? i : contract_data.length,
                id: service.id,
                name: service.name,
                frequency: 1,
                interval: 0,
                days: [],
                dates: [],
            });
        }
    });

    showServices();
}


function showServices() {
    var html = "";

    contract_data.forEach((data) => {
        html += createService(data);
    });

    $("#selected-services").html(html);
}

function setFrecuency(index) {
    var exec_type = parseInt($("#exec" + index).val());
    var interval = $("#interval" + index);
    var types = [3, 5];
    var service = contract_data.find((item) => item.index == index);

    if (service) {
        service.frequency = exec_type;

        interval.empty();

        if (types.includes(exec_type)) {
            service.interval = 1;
            if (exec_type == 3) {
                interval.append(
                    $("<option>", {
                        value: "1",
                        text: "Por día",
                    }),
                );
                interval.append(
                    $("<option>", {
                        value: "2",
                        text: "Primera semana",
                    }),
                );
                interval.append(
                    $("<option>", {
                        value: "3",
                        text: "Segunda semana",
                    }),
                );
                interval.append(
                    $("<option>", {
                        value: "4",
                        text: "Tercera semana",
                    }),
                );
                interval.append(
                    $("<option>", {
                        value: "5",
                        text: "Cuarta/Ultima semana",
                    }),
                );

                $("#day-letter" + index).hide();
                $("#day-number" + index).show();
            } else {
                interval.append(
                    $("<option>", {
                        value: "1",
                        text: "Quincenal",
                    }),
                );
            }
        } else {
            service.interval = 0;
            interval.append(
                $("<option>", {
                    value: "0",
                    text: "No aplica",
                }),
            );
        }

        interval.prop("disabled", !types.includes(exec_type));

        if (exec_type == 2) {
            $("#day-letter" + index).prop("disabled", false);
            $("#day-letter" + index).show();
            $("#day-number" + index).hide();
        }
        if (exec_type == 1 || exec_type == 4) {
            $("#day-letter" + index).show();
            $("#day-letter" + index).val("");
            $("#day-letter" + index).prop("disabled", true);
            $("#day-number" + index).hide();
        }
    }
}

function setDays(index) {
    var exec_type = parseInt($("#exec" + index).val());
    var interval = $("#interval" + index).val();

    var service = contract_data.find((item) => item.index == index);

    if (service) {
        service.interval = parseInt(interval);
    }

    if (exec_type == 3) {
        if (interval == 1) {
            $("#day-letter" + index).hide();
            $("#day-number" + index).show();
        } else {
            $("#day-letter" + index).prop("disabled", false);
            $("#day-letter" + index).show();
            $("#day-number" + index).hide();
        }
    }
}

function validateNumberInput(input, index) {
    let values = input.value.split(",").map((value) => value.trim());
    let last_value = values[values.length - 1];
    let last_num = parseInt(last_value);
    var service = contract_data.find((item) => item.index == index);

    if ((last_num > 31 || last_num < 1) && last_value != "") {
        alert("No puedes ingresar un número menor a 1 o mayor a 31.");
        values[values.length - 1] = aux;
        input.value = values.join(", ");
    } else {
        aux = last_value;
        if (service) {
            service.days = values.map((value) => parseInt(value, 10));
        }
    }
}

function validateLetterInput(input, index) {
    let values = input.value.split(",").map((value) => value.trim());
    let last_value = values[values.length - 1];
    var service = contract_data.find((item) => item.index == index);

    if (last_value != "") {
        if (!day_letters.includes(last_value)) {
            alert(
                "No puedes ingresar una en mayusculas correspondientes a cada dia.",
            );
            values[values.length - 1] = aux;
            input.value = values.join(", ");
        } else {
            if (service) {
                service.days = values;
            }
        }
    }
}

function deleteService(index) {
    if (index < 0 || index >= contract_data.length) {
        console.error("Índice no válido");
        return;
    }

    var service = contract_data[index];

    let selectedIndex = selected_services.findIndex(
        (item) => item.id == service.id,
    );
    if (selectedIndex != -1) {
        selected_services.splice(selectedIndex, 1);
        $("#service" + service.id).removeClass("active");
    }

    contract_data.splice(index, 1);
    contract_data.forEach((item, idx) => (item.index = idx));

    showServices();
}

function duplicateService(index) {
    if (index < 0 || index > contract_data.length) {
        console.error("Posición no válida");
        return;
    }

    var item = { ...contract_data[index] };
    item.index = contract_data.length;
    contract_data.push(item);
    showServices();
}

function generateDatesByNumber(startDate, endDate, days) {
    const dates = [];
    const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    console.log(days);

    let start = new Date(startDate);
    let end = new Date(endDate);

    const isLeapYear = (year) =>
        (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;

    while (start <= end) {
        let month = start.getMonth();
        let year = start.getFullYear();
        let daysInCurrentMonth = daysInMonth[month];

        if (month == 1 && isLeapYear(year)) {
            daysInCurrentMonth = 29; // February in a leap year
        }
        
        const validDays = days.map((d) => 
            d == 31 && daysInCurrentMonth < 31 ? daysInCurrentMonth : d
        ).filter((d) => d <= daysInCurrentMonth);

        if (validDays.includes(start.getDate())) {
            dates.push(new Date(start));
        }

        start.setDate(start.getDate() + 1);
    }

    return dates;
}

function sortDates(dateArray) {
    return dateArray.sort((a, b) => a - b);
}

function generateDatesByLetter(startDate, endDate, days) {
    const dates = [];
    const day_indexs = days
        .map((day) => dayMap[day])
        .filter((index) => index != undefined);

    day_indexs.forEach((index) => {
        let start = new Date(startDate);
        let end = new Date(endDate);

        while (index != start.getDay()) {
            start.setDate(start.getDate() + 1);
        }

        while (start <= end) {
            if (day_indexs.includes(start.getDay())) {
                dates.push(new Date(start));
            }
            start.setDate(start.getDate() + 7);
        }
    });

    return sortDates(dates);
}

function generateDatesByInterval(startDate, endDate, days, interval) {
    const dates = [];
    const day_indexs = days
        .map((day) => dayMap[day])
        .filter((index) => index != undefined);

    const getNthWeekday = (year, month, dayOfWeek, n) => {
        let date = new Date(year, month, 1);
        date.setDate(((dayOfWeek - date.getDay() + 7) % 7) + 1);
        if (n > 1) {
            date.setDate(date.getDate() + (n - 1) * 7);
        }
        return date;
    };

    let current = new Date(startDate);

    while (current <= new Date(endDate)) {
        let year = current.getFullYear();
        let month = current.getMonth();

        for (const dayIndex of day_indexs) {
            let nthWeek = interval;
            let date = getNthWeekday(year, month, dayIndex, nthWeek);
            if (date >= new Date(startDate) && date <= new Date(endDate)) {
                dates.push(new Date(date));
            }
        }

        current.setMonth(current.getMonth() + 1);
        current.setDate(1);
    }

    return dates;
}

function generateDatesByPeriod(startDate, endDate) {
    const dates = [];
    let current = new Date(startDate);
    const end = new Date(endDate);
    current.setDate(current.getDate() + 1);

    // Ensure the end date is after the start date
    if (end < current) {
        throw new Error("End date must be after start date");
    }

    // Generate dates in intervals of 15 days
    while (current <= end) {
        dates.push(new Date(current)); // Add the current date to the array
        current.setDate(current.getDate() + 14); // Move to the next interval of 15 days
    }

    return dates;
}

function getAllDatesBetween(startDate, endDate) {
    const dates = [];
    let current = new Date(startDate);
    const end = new Date(endDate);

    if (end < current) {
        throw new Error("End date must be after start date");
    }

    while (current <= end) {
        dates.push(new Date(current));
        current.setDate(current.getDate() + 1);
    }

    return dates;
}

function createContract() {
    const customer = $('#customer_id').val();
    const startDate = $("#startdate").val();
    const endDate = $("#enddate").val();
    const technicians = JSON.parse($("#technicians").val());
    const modal = $("#confirmModal");

    if (customer == 0) {
        alert("Selecciona el cliente");
        return;
    }

    if (startDate == "" && endDate == "") {
        alert("Incluye la fecha de inicio y/o finalización del contrato");
        return;
    }

    if (contract_data.length <= 0) {
        alert("Añade y/o configura los servicios");
        return;
    }

    if (technicians.length <= 0) {
        alert("Selecciona a los técnicos");
        return;
    }

    contract_data.forEach((service) => {
        switch (service.frequency) {
            case 1:
                service.dates = getAllDatesBetween(startDate, endDate);
                break;
            case 2:
                service.dates = generateDatesByLetter(
                    startDate,
                    endDate,
                    service.days,
                );
                break;
            case 3:
                if (service.interval > 0) {
                    service.dates =
                        service.interval == 1
                            ? generateDatesByNumber(
                                  startDate,
                                  endDate,
                                  service.days,
                              )
                            : generateDatesByInterval(
                                  startDate,
                                  endDate,
                                  service.days,
                                  service.interval - 1,
                              );
                } else {
                    alert(
                        "El intervalo seleccionado para el servicio " +
                            service.index +
                            " es incorrecto",
                    );
                }
                break;
            case 4:
                service.dates.push(new Date(startDate));
                break;
            case 5:
                service.dates = generateDatesByPeriod(startDate, endDate);
                break;
            default:
                alert("La frecuencia no se encuentra en la lista de opciones");
                break;
        }
    });
    createDatePreview();
    modal.modal("show");
}

function createDatePreview() {
    var html = "";
    contract_data.forEach((service) => {
        html += `
            <div class="d-flex justify-content-between mb-3">
                <h5 class="fw-bold"> ${service.name} [${
                    service.dates.length
                }] </h5>
                <button class="btn btn-primary btn-sm" type="button" data-bs-toggle="collapse" data-bs-target="#collapseNewDate" aria-expanded="false" aria-controls="collapseExample">
                    <i class="bi bi-plus-lg"></i>
                </button>
            </div>
            <div class="collapse mb-3" id="collapseNewDate">
                <div class="card card-body">
                    <div class="input-group input-group-sm mb-3">
                        <label for="new-date" class="form-label me-2">Nueva fecha</label>
                        <input type="date" class="form-control" id="new-date${service.id}" name="date" value="">
                        <button class="btn btn-primary" type="button" onclick="createDate(${
                            service.id
                        })">Agregar</button>
                    </div>
                </div>
            </div>
            <div class="list-group">
            ${service.dates
                .map(
                    (date, i) =>
                        ` <div class="input-group input-group-sm mb-3">
                            <input type="date" class="form-control" id="service${
                                service.id
                            }-date${i}" name="date" value="${convertDate(
                                date,
                            )}" onchange="updateDate(this.value, ${service.id}, ${i})">
                            <button class="btn btn-danger" type="button" onclick="deleteDate(${
                                service.id
                            }, ${i})"><i class="bi bi-trash-fill"></i> Eliminar</button>
                        </div> `,
                )
                .join("")}
            </div>
        `;
    });
    $("#preview").html(html);
}

function convertDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, "0"); // Los meses se cuentan desde 0
    const day = String(date.getDate()).padStart(2, "0");
    return `${year}-${month}-${day}`;
}

function createDate(service_id) {
    var date = new Date($("#new-date" + service_id).val());
    date.setDate(date.getDate() + 1);
    service = contract_data.find((item) => item.id == service_id);

    if (service) {
        service.dates.push(date);
        $("#preview").html("");
        createDatePreview();
    }
}

function updateDate(value, service_id, index) {
    var date = new Date(value);
    date.setDate(date.getDate() + 1);
    service = contract_data.find((item) => item.id == service_id);

    if (service) {
        service.dates[index] = date;
    }
}

function deleteDate(service_id, index) {
    service = contract_data.find((item) => item.id == service_id);

    if (service) {
        service.dates.splice(index, 1);
        createDatePreview();
    }
}

function submitContract() {
    var new_dates = [];
    contract_data.forEach((service) => {
        new_dates = service.dates.map((date) => convertDate(date));
        service.dates = new_dates;
    });
    $("#contract-data").val(JSON.stringify(contract_data));
    $("#contract-form").submit();
}
