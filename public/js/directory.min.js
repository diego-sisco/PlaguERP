let selectedPaths = [];

$(document).ready(function () {
    $("#work-department").val($("#wk-department").val());
    if (type != 1) {
        let treeHtml = buildDirectoryTree(directories);
        $("#tree-dir").html(treeHtml);

        if (paths.length > 0) {
            $("#directories").val(JSON.stringify(paths));
            selectedPaths = paths;
            paths.forEach((path) => {
                const foundInputs = findInputsByValue(path);
                foundInputs.prop("checked", true);

                const id = `collapse${transformPathToId(path)}`;
                const $collapse = $(`#${id}`);

                if ($collapse.length) {
                    $collapse.collapse("show");
                }
            });
        }
    }
});

function findInputsByValue(value) {
    return $("input").filter(`[value="${value}"]`);
}

function transformPathToId(path) {
    const parts = path.split("/");
    if (parts.length < 2) return "";

    const folderName = parts.slice(1).join("/");
    return folderName
        .replace(/\s+/g, "")
        .replace(/[/]/g, "")
        .replace(/[^a-zA-Z0-9]/g, "");
}

function submitForm() {
    const directoriesInput = $("#directories").val();
    const customerIdInput = $("#customer-id").val();
    const customers = $("#customers").val();
    let valid = true;

    if (type != 1) {
        if (!directoriesInput) {
            console.log(directoriesInput);
            alert("Debes asigna los permisos a las carpetas.");
            valid = false;
        }

        if (customerIdInput != undefined) {
            if (!customerIdInput) {
                alert("Selecciona un cliente");
                valid = false;
            }
        } else {
            if(customers.length <= 0) {
                alert("Selecciona los cliente");
                valid = false;
            }
        }
    }
    return valid;
}

function buildDirectoryTree(directories) {
    let html = "";

    directories.forEach((dir, i) => {
        let subDirHtml = "";

        if (dir.directories.length > 0) {
            subDirHtml = buildDirectoryTree(dir.directories);
        }

        html += `
            <li class="list-group-item">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="${
                        dir["path"]
                    }"
                        id="directory${i}"
                        data-directories='${JSON.stringify(dir.directories)}'
                        onclick="toggleDir('collapse${dir["name"].replace(
                            /\s+/g,
                            "",
                        )}', this.value, this)">
                    <label class="form-check-label" for="directory${i}">
                        ${dir.name}
                    </label>
                </div>

                ${
                    dir.directories.length > 0
                        ? `
                    <div class="collapse" id="collapse${dir["name"].replace(
                        /\s+/g,
                        "",
                    )}">
                        <div class="border border-top-0">
                            <ul class="list-group list-group-flush">
                                ${subDirHtml}
                            </ul>
                        </div>
                    </div>
                `
                        : ""
                }
            </li>
        `;
    });

    return html;
}

function toggleDir(collapseId, path, checkbox) {
    const directories = JSON.parse(checkbox.getAttribute("data-directories"));

    function updateSubdirectories(subDirs, add) {
        subDirs.forEach((subDir) => {
            const subCheckbox = document.querySelector(
                `input[value="${subDir.path}"]`,
            );

            if (subCheckbox) {
                subCheckbox.checked = add;

                if (add) {
                    if (!selectedPaths.includes(subDir.path)) {
                        selectedPaths.push(subDir.path);
                    }
                } else {
                    const index = selectedPaths.indexOf(subDir.path);
                    if (index > -1) {
                        selectedPaths.splice(index, 1);
                    }
                }
            }

            if (subDir.directories.length > 0) {
                updateSubdirectories(subDir.directories, add);
            }
        });
    }

    if (checkbox.checked) {
        if (!selectedPaths.includes(path)) {
            selectedPaths.push(path);
        }
        updateSubdirectories(directories, true);
    } else {
        const index = selectedPaths.indexOf(path);
        if (index > -1) {
            selectedPaths.splice(index, 1);
        }
        updateSubdirectories(directories, false);
    }

    console.log("Selected Paths:", selectedPaths);
    $("#" + collapseId).collapse("toggle");
    $("#directories").val(JSON.stringify(selectedPaths));
}
